// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/zjl233/gotter/ent/authtoken"
	"github.com/zjl233/gotter/ent/predicate"
	"github.com/zjl233/gotter/ent/user"
)

// AuthTokenUpdate is the builder for updating AuthToken entities.
type AuthTokenUpdate struct {
	config

	updated_at *time.Time
	token      *string

	clearexpires_at bool
	user            map[int]struct{}
	clearedUser     bool
	predicates      []predicate.AuthToken
}

// Where adds a new predicate for the builder.
func (atu *AuthTokenUpdate) Where(ps ...predicate.AuthToken) *AuthTokenUpdate {
	atu.predicates = append(atu.predicates, ps...)
	return atu
}

// SetUpdatedAt sets the updated_at field.
func (atu *AuthTokenUpdate) SetUpdatedAt(t time.Time) *AuthTokenUpdate {
	atu.updated_at = &t
	return atu
}

// SetToken sets the token field.
func (atu *AuthTokenUpdate) SetToken(s string) *AuthTokenUpdate {
	atu.token = &s
	return atu
}

// SetUserID sets the user edge to User by id.
func (atu *AuthTokenUpdate) SetUserID(id int) *AuthTokenUpdate {
	if atu.user == nil {
		atu.user = make(map[int]struct{})
	}
	atu.user[id] = struct{}{}
	return atu
}

// SetUser sets the user edge to User.
func (atu *AuthTokenUpdate) SetUser(u *User) *AuthTokenUpdate {
	return atu.SetUserID(u.ID)
}

// ClearUser clears the user edge to User.
func (atu *AuthTokenUpdate) ClearUser() *AuthTokenUpdate {
	atu.clearedUser = true
	return atu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (atu *AuthTokenUpdate) Save(ctx context.Context) (int, error) {
	if atu.updated_at == nil {
		v := authtoken.UpdateDefaultUpdatedAt()
		atu.updated_at = &v
	}
	if len(atu.user) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if atu.clearedUser && atu.user == nil {
		return 0, errors.New("ent: clearing a unique edge \"user\"")
	}
	return atu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AuthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AuthTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AuthTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (atu *AuthTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authtoken.Table,
			Columns: authtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authtoken.FieldID,
			},
		},
	}
	if ps := atu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := atu.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: authtoken.FieldUpdatedAt,
		})
	}
	if value := atu.token; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: authtoken.FieldToken,
		})
	}
	if atu.clearexpires_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: authtoken.FieldExpiresAt,
		})
	}
	if atu.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AuthTokenUpdateOne is the builder for updating a single AuthToken entity.
type AuthTokenUpdateOne struct {
	config
	id int

	updated_at *time.Time
	token      *string

	clearexpires_at bool
	user            map[int]struct{}
	clearedUser     bool
}

// SetUpdatedAt sets the updated_at field.
func (atuo *AuthTokenUpdateOne) SetUpdatedAt(t time.Time) *AuthTokenUpdateOne {
	atuo.updated_at = &t
	return atuo
}

// SetToken sets the token field.
func (atuo *AuthTokenUpdateOne) SetToken(s string) *AuthTokenUpdateOne {
	atuo.token = &s
	return atuo
}

// SetUserID sets the user edge to User by id.
func (atuo *AuthTokenUpdateOne) SetUserID(id int) *AuthTokenUpdateOne {
	if atuo.user == nil {
		atuo.user = make(map[int]struct{})
	}
	atuo.user[id] = struct{}{}
	return atuo
}

// SetUser sets the user edge to User.
func (atuo *AuthTokenUpdateOne) SetUser(u *User) *AuthTokenUpdateOne {
	return atuo.SetUserID(u.ID)
}

// ClearUser clears the user edge to User.
func (atuo *AuthTokenUpdateOne) ClearUser() *AuthTokenUpdateOne {
	atuo.clearedUser = true
	return atuo
}

// Save executes the query and returns the updated entity.
func (atuo *AuthTokenUpdateOne) Save(ctx context.Context) (*AuthToken, error) {
	if atuo.updated_at == nil {
		v := authtoken.UpdateDefaultUpdatedAt()
		atuo.updated_at = &v
	}
	if len(atuo.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if atuo.clearedUser && atuo.user == nil {
		return nil, errors.New("ent: clearing a unique edge \"user\"")
	}
	return atuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AuthTokenUpdateOne) SaveX(ctx context.Context) *AuthToken {
	at, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return at
}

// Exec executes the query on the entity.
func (atuo *AuthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AuthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (atuo *AuthTokenUpdateOne) sqlSave(ctx context.Context) (at *AuthToken, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authtoken.Table,
			Columns: authtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  atuo.id,
				Type:   field.TypeInt,
				Column: authtoken.FieldID,
			},
		},
	}
	if value := atuo.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: authtoken.FieldUpdatedAt,
		})
	}
	if value := atuo.token; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: authtoken.FieldToken,
		})
	}
	if atuo.clearexpires_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: authtoken.FieldExpiresAt,
		})
	}
	if atuo.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	at = &AuthToken{config: atuo.config}
	_spec.Assign = at.assignValues
	_spec.ScanValues = at.scanValues()
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return at, nil
}
