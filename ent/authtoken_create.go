// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/zjl233/gotter/ent/authtoken"
	"github.com/zjl233/gotter/ent/user"
)

// AuthTokenCreate is the builder for creating a AuthToken entity.
type AuthTokenCreate struct {
	config
	created_at *time.Time
	updated_at *time.Time
	token      *string
	expires_at *time.Time
	user       map[int]struct{}
}

// SetCreatedAt sets the created_at field.
func (atc *AuthTokenCreate) SetCreatedAt(t time.Time) *AuthTokenCreate {
	atc.created_at = &t
	return atc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (atc *AuthTokenCreate) SetNillableCreatedAt(t *time.Time) *AuthTokenCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetUpdatedAt sets the updated_at field.
func (atc *AuthTokenCreate) SetUpdatedAt(t time.Time) *AuthTokenCreate {
	atc.updated_at = &t
	return atc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (atc *AuthTokenCreate) SetNillableUpdatedAt(t *time.Time) *AuthTokenCreate {
	if t != nil {
		atc.SetUpdatedAt(*t)
	}
	return atc
}

// SetToken sets the token field.
func (atc *AuthTokenCreate) SetToken(s string) *AuthTokenCreate {
	atc.token = &s
	return atc
}

// SetExpiresAt sets the expires_at field.
func (atc *AuthTokenCreate) SetExpiresAt(t time.Time) *AuthTokenCreate {
	atc.expires_at = &t
	return atc
}

// SetNillableExpiresAt sets the expires_at field if the given value is not nil.
func (atc *AuthTokenCreate) SetNillableExpiresAt(t *time.Time) *AuthTokenCreate {
	if t != nil {
		atc.SetExpiresAt(*t)
	}
	return atc
}

// SetUserID sets the user edge to User by id.
func (atc *AuthTokenCreate) SetUserID(id int) *AuthTokenCreate {
	if atc.user == nil {
		atc.user = make(map[int]struct{})
	}
	atc.user[id] = struct{}{}
	return atc
}

// SetUser sets the user edge to User.
func (atc *AuthTokenCreate) SetUser(u *User) *AuthTokenCreate {
	return atc.SetUserID(u.ID)
}

// Save creates the AuthToken in the database.
func (atc *AuthTokenCreate) Save(ctx context.Context) (*AuthToken, error) {
	if atc.created_at == nil {
		v := authtoken.DefaultCreatedAt()
		atc.created_at = &v
	}
	if atc.updated_at == nil {
		v := authtoken.DefaultUpdatedAt()
		atc.updated_at = &v
	}
	if atc.token == nil {
		return nil, errors.New("ent: missing required field \"token\"")
	}
	if len(atc.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if atc.user == nil {
		return nil, errors.New("ent: missing required edge \"user\"")
	}
	return atc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AuthTokenCreate) SaveX(ctx context.Context) *AuthToken {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (atc *AuthTokenCreate) sqlSave(ctx context.Context) (*AuthToken, error) {
	var (
		at    = &AuthToken{config: atc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authtoken.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authtoken.FieldID,
			},
		}
	)
	if value := atc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: authtoken.FieldCreatedAt,
		})
		at.CreatedAt = *value
	}
	if value := atc.updated_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: authtoken.FieldUpdatedAt,
		})
		at.UpdatedAt = *value
	}
	if value := atc.token; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: authtoken.FieldToken,
		})
		at.Token = *value
	}
	if value := atc.expires_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: authtoken.FieldExpiresAt,
		})
		at.ExpiresAt = value
	}
	if nodes := atc.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authtoken.UserTable,
			Columns: []string{authtoken.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	at.ID = int(id)
	return at, nil
}
