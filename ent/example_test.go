// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"log"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// dsn for the database. In order to run the tests locally, run the following command:
//
//	 ENT_INTEGRATION_ENDPOINT="root:pass@tcp(localhost:3306)/test?parseTime=True" go test -v
//
var dsn string

func ExampleAuthToken() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the authtoken's edges.

	// create authtoken vertex with its edges.
	at := client.AuthToken.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetToken("string").
		SetExpiresAt(time.Now()).
		SaveX(ctx)
	log.Println("authtoken created:", at)

	// query edges.

	// Output:
}
func ExampleComment() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the comment's edges.

	// create comment vertex with its edges.
	c := client.Comment.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetContent("string").
		SaveX(ctx)
	log.Println("comment created:", c)

	// query edges.

	// Output:
}
func ExamplePost() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the post's edges.
	c1 := client.Comment.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetContent("string").
		SaveX(ctx)
	log.Println("comment created:", c1)
	u2 := client.User.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetAccount("string").
		SetPasswordHash("string").
		SetName("string").
		SetProfileImg("string").
		SetBkgWallImg("string").
		SaveX(ctx)
	log.Println("user created:", u2)

	// create post vertex with its edges.
	po := client.Post.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetContent("string").
		AddComments(c1).
		AddLikes(u2).
		SaveX(ctx)
	log.Println("post created:", po)

	// query edges.

	c1, err = po.QueryComments().First(ctx)
	if err != nil {
		log.Fatalf("failed querying comments: %v", err)
	}
	log.Println("comments found:", c1)

	u2, err = po.QueryLikes().First(ctx)
	if err != nil {
		log.Fatalf("failed querying likes: %v", err)
	}
	log.Println("likes found:", u2)

	// Output:
}
func ExampleUser() {
	if dsn == "" {
		return
	}
	ctx := context.Background()
	drv, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("failed creating database client: %v", err)
	}
	defer drv.Close()
	client := NewClient(Driver(drv))
	// creating vertices for the user's edges.
	at0 := client.AuthToken.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetToken("string").
		SetExpiresAt(time.Now()).
		SaveX(ctx)
	log.Println("authtoken created:", at0)
	po1 := client.Post.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetContent("string").
		SaveX(ctx)
	log.Println("post created:", po1)
	c2 := client.Comment.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetContent("string").
		SaveX(ctx)
	log.Println("comment created:", c2)
	u4 := client.User.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetAccount("string").
		SetPasswordHash("string").
		SetName("string").
		SetProfileImg("string").
		SetBkgWallImg("string").
		SaveX(ctx)
	log.Println("user created:", u4)

	// create user vertex with its edges.
	u := client.User.
		Create().
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		SetAccount("string").
		SetPasswordHash("string").
		SetName("string").
		SetProfileImg("string").
		SetBkgWallImg("string").
		AddTokens(at0).
		AddPosts(po1).
		AddComments(c2).
		AddFollowing(u4).
		SaveX(ctx)
	log.Println("user created:", u)

	// query edges.
	at0, err = u.QueryTokens().First(ctx)
	if err != nil {
		log.Fatalf("failed querying tokens: %v", err)
	}
	log.Println("tokens found:", at0)

	po1, err = u.QueryPosts().First(ctx)
	if err != nil {
		log.Fatalf("failed querying posts: %v", err)
	}
	log.Println("posts found:", po1)

	c2, err = u.QueryComments().First(ctx)
	if err != nil {
		log.Fatalf("failed querying comments: %v", err)
	}
	log.Println("comments found:", c2)

	u4, err = u.QueryFollowing().First(ctx)
	if err != nil {
		log.Fatalf("failed querying following: %v", err)
	}
	log.Println("following found:", u4)

	// Output:
}
