// Code generated by entc, DO NOT EDIT.

package comment

import (
	"github.com/zjl233/gotter/ent/schema"
)

const (
	// Label holds the string label denoting the comment type in the database.
	Label = "comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContent holds the string denoting the content vertex property in the database.
	FieldContent = "content"

	// Table holds the table name of the comment in the database.
	Table = "comments"
	// AuthorTable is the table the holds the author relation/edge.
	AuthorTable = "comments"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_comments"
	// PostTable is the table the holds the post relation/edge.
	PostTable = "comments"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "post_comments"
)

// Columns holds all SQL columns for comment fields.
var Columns = []string{
	FieldID,
	FieldContent,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Comment type.
var ForeignKeys = []string{
	"post_comments",
	"user_comments",
}

var (
	fields = schema.Comment{}.Fields()

	// descContent is the schema descriptor for content field.
	descContent = fields[0].Descriptor()
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator = func() func(string) error {
		validators := descContent.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(content string) error {
			for _, fn := range fns {
				if err := fn(content); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
