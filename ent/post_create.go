// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/zjl233/gotter/ent/post"
)

// PostCreate is the builder for creating a Post entity.
type PostCreate struct {
	config
	content *string
}

// SetContent sets the content field.
func (pc *PostCreate) SetContent(s string) *PostCreate {
	pc.content = &s
	return pc
}

// Save creates the Post in the database.
func (pc *PostCreate) Save(ctx context.Context) (*Post, error) {
	if pc.content == nil {
		return nil, errors.New("ent: missing required field \"content\"")
	}
	if err := post.ContentValidator(*pc.content); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"content\": %v", err)
	}
	return pc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PostCreate) SaveX(ctx context.Context) *Post {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PostCreate) sqlSave(ctx context.Context) (*Post, error) {
	var (
		po    = &Post{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: post.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: post.FieldID,
			},
		}
	)
	if value := pc.content; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: post.FieldContent,
		})
		po.Content = *value
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	po.ID = int(id)
	return po, nil
}
