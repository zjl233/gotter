// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/zjl233/gotter/ent/migrate"

	"github.com/zjl233/gotter/ent/authtoken"
	"github.com/zjl233/gotter/ent/post"
	"github.com/zjl233/gotter/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuthToken is the client for interacting with the AuthToken builders.
	AuthToken *AuthTokenClient
	// Post is the client for interacting with the Post builders.
	Post *PostClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:    c,
		Schema:    migrate.NewSchema(c.driver),
		AuthToken: NewAuthTokenClient(c),
		Post:      NewPostClient(c),
		User:      NewUserClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:    cfg,
		AuthToken: NewAuthTokenClient(cfg),
		Post:      NewPostClient(cfg),
		User:      NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuthToken.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:    cfg,
		Schema:    migrate.NewSchema(cfg.driver),
		AuthToken: NewAuthTokenClient(cfg),
		Post:      NewPostClient(cfg),
		User:      NewUserClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// AuthTokenClient is a client for the AuthToken schema.
type AuthTokenClient struct {
	config
}

// NewAuthTokenClient returns a client for the AuthToken from the given config.
func NewAuthTokenClient(c config) *AuthTokenClient {
	return &AuthTokenClient{config: c}
}

// Create returns a create builder for AuthToken.
func (c *AuthTokenClient) Create() *AuthTokenCreate {
	return &AuthTokenCreate{config: c.config}
}

// Update returns an update builder for AuthToken.
func (c *AuthTokenClient) Update() *AuthTokenUpdate {
	return &AuthTokenUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthTokenClient) UpdateOne(at *AuthToken) *AuthTokenUpdateOne {
	return c.UpdateOneID(at.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthTokenClient) UpdateOneID(id int) *AuthTokenUpdateOne {
	return &AuthTokenUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for AuthToken.
func (c *AuthTokenClient) Delete() *AuthTokenDelete {
	return &AuthTokenDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AuthTokenClient) DeleteOne(at *AuthToken) *AuthTokenDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AuthTokenClient) DeleteOneID(id int) *AuthTokenDeleteOne {
	return &AuthTokenDeleteOne{c.Delete().Where(authtoken.ID(id))}
}

// Create returns a query builder for AuthToken.
func (c *AuthTokenClient) Query() *AuthTokenQuery {
	return &AuthTokenQuery{config: c.config}
}

// Get returns a AuthToken entity by its id.
func (c *AuthTokenClient) Get(ctx context.Context, id int) (*AuthToken, error) {
	return c.Query().Where(authtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthTokenClient) GetX(ctx context.Context, id int) *AuthToken {
	at, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return at
}

// QueryUser queries the user edge of a AuthToken.
func (c *AuthTokenClient) QueryUser(at *AuthToken) *UserQuery {
	query := &UserQuery{config: c.config}
	id := at.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(authtoken.Table, authtoken.FieldID, id),
		sqlgraph.To(user.Table, user.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, authtoken.UserTable, authtoken.UserColumn),
	)
	query.sql = sqlgraph.Neighbors(at.driver.Dialect(), step)

	return query
}

// PostClient is a client for the Post schema.
type PostClient struct {
	config
}

// NewPostClient returns a client for the Post from the given config.
func NewPostClient(c config) *PostClient {
	return &PostClient{config: c}
}

// Create returns a create builder for Post.
func (c *PostClient) Create() *PostCreate {
	return &PostCreate{config: c.config}
}

// Update returns an update builder for Post.
func (c *PostClient) Update() *PostUpdate {
	return &PostUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *PostClient) UpdateOne(po *Post) *PostUpdateOne {
	return c.UpdateOneID(po.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *PostClient) UpdateOneID(id int) *PostUpdateOne {
	return &PostUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Post.
func (c *PostClient) Delete() *PostDelete {
	return &PostDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PostClient) DeleteOne(po *Post) *PostDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PostClient) DeleteOneID(id int) *PostDeleteOne {
	return &PostDeleteOne{c.Delete().Where(post.ID(id))}
}

// Create returns a query builder for Post.
func (c *PostClient) Query() *PostQuery {
	return &PostQuery{config: c.config}
}

// Get returns a Post entity by its id.
func (c *PostClient) Get(ctx context.Context, id int) (*Post, error) {
	return c.Query().Where(post.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PostClient) GetX(ctx context.Context, id int) *Post {
	po, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return po
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	return &UserCreate{config: c.config}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	return &UserUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	return c.UpdateOneID(u.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	return &UserUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	return &UserDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	return &UserDeleteOne{c.Delete().Where(user.ID(id))}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryTokens queries the tokens edge of a User.
func (c *UserClient) QueryTokens(u *User) *AuthTokenQuery {
	query := &AuthTokenQuery{config: c.config}
	id := u.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(user.Table, user.FieldID, id),
		sqlgraph.To(authtoken.Table, authtoken.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, user.TokensTable, user.TokensColumn),
	)
	query.sql = sqlgraph.Neighbors(u.driver.Dialect(), step)

	return query
}
