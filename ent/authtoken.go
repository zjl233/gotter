// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/zjl233/gotter/ent/authtoken"
	"github.com/zjl233/gotter/ent/user"
)

// AuthToken is the model entity for the AuthToken schema.
type AuthToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"-"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthTokenQuery when eager-loading is set.
	Edges       AuthTokenEdges `json:"edges"`
	user_tokens *int
}

// AuthTokenEdges holds the relations/edges for other nodes in the graph.
type AuthTokenEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthTokenEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthToken) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // token
		&sql.NullTime{},   // expires_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*AuthToken) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_tokens
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthToken fields.
func (at *AuthToken) assignValues(values ...interface{}) error {
	if m, n := len(values), len(authtoken.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	at.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		at.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		at.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field token", values[2])
	} else if value.Valid {
		at.Token = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field expires_at", values[3])
	} else if value.Valid {
		at.ExpiresAt = new(time.Time)
		*at.ExpiresAt = value.Time
	}
	values = values[4:]
	if len(values) == len(authtoken.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_tokens", value)
		} else if value.Valid {
			at.user_tokens = new(int)
			*at.user_tokens = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the AuthToken.
func (at *AuthToken) QueryUser() *UserQuery {
	return (&AuthTokenClient{at.config}).QueryUser(at)
}

// Update returns a builder for updating this AuthToken.
// Note that, you need to call AuthToken.Unwrap() before calling this method, if this AuthToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AuthToken) Update() *AuthTokenUpdateOne {
	return (&AuthTokenClient{at.config}).UpdateOne(at)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (at *AuthToken) Unwrap() *AuthToken {
	tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthToken is not a transactional entity")
	}
	at.config.driver = tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AuthToken) String() string {
	var builder strings.Builder
	builder.WriteString("AuthToken(")
	builder.WriteString(fmt.Sprintf("id=%v", at.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", token=<sensitive>")
	if v := at.ExpiresAt; v != nil {
		builder.WriteString(", expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// AuthTokens is a parsable slice of AuthToken.
type AuthTokens []*AuthToken

func (at AuthTokens) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
