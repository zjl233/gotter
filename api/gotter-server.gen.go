// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all posts
	// (GET /posts)
	FindPosts(ctx echo.Context, params FindPostsParams) error
	// Creates a new post
	// (POST /posts)
	AddPost(ctx echo.Context) error
	// Deletes a post by ID
	// (DELETE /posts/{id})
	DeletePostByID(ctx echo.Context, id int32) error
	// Returns a post by ID
	// (GET /posts/{id})
	FindPostByID(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPosts converts echo context to params.
func (w *ServerInterfaceWrapper) FindPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPostsParams
	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPosts(ctx, params)
	return err
}

// AddPost converts echo context to params.
func (w *ServerInterfaceWrapper) AddPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPost(ctx)
	return err
}

// DeletePostByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostByID(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/posts", wrapper.FindPosts)
	router.POST("/posts", wrapper.AddPost)
	router.DELETE("/posts/:id", wrapper.DeletePostByID)
	router.GET("/posts/:id", wrapper.FindPostByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTW8bNxP+K8S873Grle2ghz3VidxCQJEIdXsKdGB2ZyUWyw/PzFoRhP3vBcmVbH3E",
	"RpCgCNCTuOR8PJznmaF2UHsbvEMnDNUOuF6j1Wl5R+QpLgL5gCQG03btG4y/DXJNJojxDqpsrNJZAa0n",
	"qwUqME5urqEA2QbMn7hCgqEAi8x69cVA++ODKwsZt4JhKIDwoTeEDVQfYUy4N18OBbzHzcKzXALuBJ2c",
	"pxwPlG+VrFGF6P164hwsZtyn0133oYXq4w7+T9hCBf8rn4pbjpUt9/iG4hSgac6x/eXMQ4/KNCfonpf4",
	"5zcXSnyC1zSwHJZD3Dau9ft66DohR6tNBxXoYAS1/YU3erVCmhgPBThtY+T7vKduF3P1J2oLBfQUndYi",
	"oSrLZz5DcXKLWyUbI4Kk6s47VDoEKKAzNTpOGhhz3AZdr1FdT6ZH0bkqy81mM9HpeOJpVY6+XP4+f3f3",
	"/v7up+vJdLIW28XkgmT5Q3uP9GhqvASxTCZlrJuRLpr85hO+28UcCnhE4oz8ajKdTGNMH9DpYKCCm7RV",
	"QNCyTryVkZO0WuEFef2B0pNjpbsusceqJW8TmbxlwbjUkr57RlJrzUrXNTIrifWPEtEx1ryBCn41rlmk",
	"fBEBaYuCxEl1x2kZRbWGWFJSJV5RAgJRAVDBQ4+0faLXty1jVNaTalrdMRbjSIj3erWvo6aPUVj92dje",
	"KtfbT0hRxITcd8KvAuqMNd+MZxn9OfgolehxPZ2ejAIdQmfqVN/yb46Yd88yGEGbHF/q6LGd99k1kd5C",
	"arXjWmTy93hyl7S67+SrIL2EJI/sC6l7h58D1oKNwtGmAO6t1bS9JNEILoxj7TjSO0ItyEorh5ssLeOy",
	"mMUTTtSsz+ijDWEM6TfYnOn4tkkyHglGlre+2X63QhyG7HkpFmM36KaJPwfkR1IT6nE4087Vd8P3JXCp",
	"nj+iQs5pTwZ59JU70wxZKh3KhUc970dvNm7V5VdMfdKMjfJZPfOZ4j5e64JWZsk91uztdj57bfDNZ3HM",
	"7IfeCGmcMXFmP40Y05yR/q3j5c355ROSDKP5kSidHUjJbGzVfBbxvfyInVB3YDTxcvmp+nrSWpR6/a9x",
	"Nv3vtvUprVkDyQbpcU/V0f+8zte6W3uW6mY6vYJhOfwTAAD//6ASYZhEDAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
