// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (GET /API/user/info/)
	AuthTest(ctx echo.Context, params AuthTestParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// AuthTest converts echo context to params.
func (w *ServerInterfaceWrapper) AuthTest(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthTestParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthTest(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/user/", wrapper.SignUp)
	router.GET("/API/user/info/", wrapper.AuthTest)
	router.POST("/API/user/login", wrapper.Login)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWX2vkNhD/KkIt9MW33qQUgp+6PUJZyKWBXOjDsZSJPGsrZ0u60Ti+EPa7F8l27N11",
	"loZA4d5saTTzm9/8fZbK1s4aNOxl9iwdENTISPHv+wdouAxfOXpF2rG2RmbyoWURbxKpw3+JkCPJRBqo",
	"UWbDu0QSfms0YS4zpgYT6VWJNQSF/OSCpGfSppC73S4Ie2eNx2j6kshS+FDWMBoOn+BcpRUEEOmDD0ie",
	"JxodWYfEunuPRBMz9v4BFctdEs4/+eLYpWhP1Og9FCiTQ3wRXVPxROe9tRWCkR30wc8vg+CLqfghN8kh",
	"lvBuH4OydW2NwAjFATNQp75zMvp1je2dRzp2GJSyTcfTvtYgLkJgEnFn9LcGE6HAGMtClWCiszV8v0JT",
	"hFCf/ZbIWpuX3xkmuiDPmfnFC6PV1yjwVq0OvG8t5a84MFwnAlhUCJ7FRXCAQHFMva2lGlhmo6I9BOfL",
	"PQQXJxCcH0P41HgWHmoU4MXEwHuNHqROT9wQymSqdkS32SVyPgf+0XP0xaALnQu7FVyicNbzmOHaMBZI",
	"gYBJCh2Rc/+1+Buqal0Xs9dbW1W27TBpxtpPpCYW+hMggqfxWdDxtndDCh7H0Pqukb1BmSO71RXOu3YQ",
	"ocDwNEB9xEY/JlQMaPYs7DG5iU1Am60dOh2oSD/WoKuA0WlGqH/3LRQF0kLbscnedmdidbMWnxFqmciG",
	"wqOS2WVpOnlz1GlWglvNjCRUZQ0KcE4mstIKjY/E9jZWDlSJ4nyx3NPuszRt23YB8XphqUj7tz69Wn+8",
	"vL69/HC+WC5KrqvIOFLt/9reIj1qhXMQ0yiShrTUXAWRP23Et7pZy0Q+IvkO+dliuVgGndahAadlJn+N",
	"R6FCuIwhT1c367TxSGkskZDuR1XhdWFE44TBVgRRGTVSHC7rPNCrC3Pn+hmGnv+w+dOb5tHPhFuZyZ/S",
	"ccKmfSNPhy4+MwRuD4AlIm86M5iLPvFE6N4Q0yw/mrKHk/R8efaOOfr62Etk0zehU572bv6H6XfdOywU",
	"YXBWJv1ecbCKnNghos4t9IDnYL0wk3YLRvdoTJhQizFrCpxJGkJuyAjVEKHh+bxZNVx+Rt9173GZ+jKP",
	"ZxRJew93m6P4LX+I+H2csvL+SFS20Ob1+r0K1/MRiFfvKNxX96qTO8vcKnB6lsyM+c3cVkg6D7yyFdXE",
	"s1MF/2MkTBdC3yiF3v9v1R7WaaTHoSj3RmZlFVSl9ZxdLC+WcrfZ/RsAAP//F2Uu4iANAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
