// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/post)
	CreatePost(ctx echo.Context, params CreatePostParams) error

	// (GET /API/post/{id})
	ShowPost(ctx echo.Context, id Id, params ShowPostParams) error

	// (GET /API/user/)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (GET /API/user/info)
	Info(ctx echo.Context, params InfoParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error

	// (GET /API/user/posts)
	ListPosts(ctx echo.Context, params ListPostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx, params)
	return err
}

// ShowPost converts echo context to params.
func (w *ServerInterfaceWrapper) ShowPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ShowPostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShowPost(ctx, id, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// Info converts echo context to params.
func (w *ServerInterfaceWrapper) Info(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Info(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// ListPosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPosts(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/post", wrapper.CreatePost)
	router.GET("/API/post/:id", wrapper.ShowPost)
	router.GET("/API/user/", wrapper.Refresh)
	router.POST("/API/user/", wrapper.SignUp)
	router.GET("/API/user/info", wrapper.Info)
	router.POST("/API/user/login", wrapper.Login)
	router.GET("/API/user/posts", wrapper.ListPosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYW0/sNhD+K5ZbiZewWagqoTx1S2m1EoeuSlEfjlZHxplNDIntYzsEhPLfKzuXzW0v",
	"h11oq77AJo7n9n0znvErpiKVggM3GgevWBJFUjCg3BML7d8QNFVMGiY4DvD8FyRWiBlIsYeZfSOJibGH",
	"OUkBB3aPhxV8zZiCEAdGZeBhTWNIiRVmXqT7ihuIQOGi8PDzKclMPNT0kBvkVio9MZAQ1FpTtW8Pbdoo",
	"xiNcWG0KtBRcg3PwSimh7A8quAFu7E8iZcIosUb4D9pa8tqSKJWQoAwr94NSLTXi/gGowYVn33/S0dAl",
	"pw+loDWJAHt9+5x1WWJaMu+FSIBwXJpe+/m5/rBR5X7gpde3xe7r2kBFmgqOwJkiiTFEleJLJ51fs8zE",
	"ZWC6/n4ZY8QdZ18zQCy0xDAxICm0WTvXQO1hQqnIuBlBpgZ1ZEEqsWIJzNNoDNFuVL449tVqKqEdEcvC",
	"w5ciTSuwR90bGt6ix8A+qoAYcBtXQqXE4ACHxMCpYekoxpkGF9rvFaxwgL/z1ynoVxj4FQDj/tXWVKLW",
	"JljnbiC/qxR0nWsFv4efBoVspDxUQukhSjgXBtGYcMfTlDxfA49slp796OGU8ebR2wzlUM2JRpzRxwqW",
	"b5Mqida5UOEGB+plDxGDEiDaoAvrgCLUuCA14DSCOhacTzsWXGyx4HxowqdMG6RJCoho1FJwqNIe/lXg",
	"1gRviV1bZ2mwsDl49PxtysI+3PVcqalPFnti6PHs4lmSkPsEcLAiiYZGM1GKvBw9/RL2CAdatCMrqzDV",
	"qlpx6KaqxejqWb4jTB9WvZn+VSSJyO3jyOH1YeW9a8nwONzAyW10rk+L4sN5uV+SvQs1x4+QdyTQ/WP0",
	"F0mScRrYOmoxLW3akrd9gFZtUn7Dvs1sFXpnOesLOwLD1360QlFb00uAViSXrv1jfCXqHpdQF35ICUus",
	"jZIZIOlPOidRBGrCxLq9vi3fodlijv4EYtv9TNlNsTEy8P3WnkGPOUMmZ8aAQjQRHBCR0nGOAtcusJWO",
	"mSQ0BnQ+mXak68D38zyfELc8ESryq73av55fXt3cXp2eT6aT2KSJizioVP++ugX1xCiMmei7T3xLS2Zs",
	"Xce/CWffbDHHHn4CpUvLzybTydTKFBI4kQwH+Af3ynNzjoPcny3mvqwP2Op/r8l2uYQ45HU62DxyQ8U8",
	"xAG+dOuLcqk9dH0eT/v1J3419hTLkjmgzc8ifDlgiNlcxXrkrD/cZ8qwriEjEAlD+8/WBW2EgsG41h/J",
	"zqdnB/hSo7GtdLqo75q1do9RZbVEOqMUtC5zYEUqiWP6Gzf9cuwsnNSGTP4rCwu7N4IRQsGzJDxEZJxO",
	"t7HIDyKTt/NLFlaU62A1PRArvQ9Ytkc6GK8qgFbpiUbu+EN2fPJQdQQiF9/mWH07mFaqvxFIBSsFOkYP",
	"+RDGP8q1w0rC0fDZHO/9ZljXQ+yFzWWmlEXASnUwdINUXvw4m9Z3RVsued6EnrehkmsWcZRJV8qrcbuX",
	"eyzidxK/vRpvi2E9zY8E7bZnmIfCrFQDIao6CGSneOL6hfCdK+/HseWmchjVDesHMaST33VTtSHHTaY4",
	"oi1aD2gztwL+z4l+hCKbiIjxzU3YtV0ej75bwsfqoLYNNu1rq7HboO0t18hNz3K0GWGhjasRKGl5ti3X",
	"/xuEKSGse6x/ItGbLmU003f1+ddMm0U9pf0LUn04v+7TKfcn2sM6sYTp1lHfjLYnGpXWvQ2zwsMa1FMd",
	"3c6omghKklhoE1xML6a4WBZ/BwAA//9HrjKY+BoAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
