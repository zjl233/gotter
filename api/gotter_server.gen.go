// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/comment/post/{id})
	CreateComment(ctx echo.Context, id Id, params CreateCommentParams) error

	// (GET /API/person/{account})
	ProfileInfo(ctx echo.Context, account Account, params ProfileInfoParams) error

	// (GET /API/person/{account}/follower)
	ListFollower(ctx echo.Context, account Account, params ListFollowerParams) error

	// (GET /API/person/{account}/following)
	ListFollowing(ctx echo.Context, account Account, params ListFollowingParams) error

	// (GET /API/person/{account}/posts)
	ListProfilePosts(ctx echo.Context, account Account, params ListProfilePostsParams) error

	// (POST /API/post/)
	CreatePost(ctx echo.Context, params CreatePostParams) error

	// (GET /API/post/{id})
	ShowPost(ctx echo.Context, id Id, params ShowPostParams) error

	// (GET /API/search/person/{q})
	SearchUser(ctx echo.Context, q string, params SearchUserParams) error

	// (GET /API/user/)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (DELETE /API/user/follow/{account})
	DeleteFollow(ctx echo.Context, account Account, params DeleteFollowParams) error

	// (GET /API/user/follow/{account})
	CreateFollow(ctx echo.Context, account Account, params CreateFollowParams) error

	// (GET /API/user/info)
	Info(ctx echo.Context, params InfoParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error

	// (GET /API/user/posts)
	ListPosts(ctx echo.Context, params ListPostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCommentParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateComment(ctx, id, params)
	return err
}

// ProfileInfo converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileInfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfileInfo(ctx, account, params)
	return err
}

// ListFollower converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollower(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollower(ctx, account, params)
	return err
}

// ListFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowingParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollowing(ctx, account, params)
	return err
}

// ListProfilePosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListProfilePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProfilePostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListProfilePosts(ctx, account, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx, params)
	return err
}

// ShowPost converts echo context to params.
func (w *ServerInterfaceWrapper) ShowPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ShowPostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShowPost(ctx, id, params)
	return err
}

// SearchUser converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "q" -------------
	var q string

	err = runtime.BindStyledParameter("simple", false, "q", ctx.Param("q"), &q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchUser(ctx, q, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// DeleteFollow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFollow(ctx, account, params)
	return err
}

// CreateFollow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFollow(ctx, account, params)
	return err
}

// Info converts echo context to params.
func (w *ServerInterfaceWrapper) Info(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Info(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// ListPosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPosts(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/comment/post/:id", wrapper.CreateComment)
	router.GET("/API/person/:account", wrapper.ProfileInfo)
	router.GET("/API/person/:account/follower", wrapper.ListFollower)
	router.GET("/API/person/:account/following", wrapper.ListFollowing)
	router.GET("/API/person/:account/posts", wrapper.ListProfilePosts)
	router.POST("/API/post/", wrapper.CreatePost)
	router.GET("/API/post/:id", wrapper.ShowPost)
	router.GET("/API/search/person/:q", wrapper.SearchUser)
	router.GET("/API/user/", wrapper.Refresh)
	router.POST("/API/user/", wrapper.SignUp)
	router.DELETE("/API/user/follow/:account", wrapper.DeleteFollow)
	router.GET("/API/user/follow/:account", wrapper.CreateFollow)
	router.GET("/API/user/info", wrapper.Info)
	router.POST("/API/user/login", wrapper.Login)
	router.GET("/API/user/posts", wrapper.ListPosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"yeH4cIznV/N/AwAA//8PkkiApisAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
