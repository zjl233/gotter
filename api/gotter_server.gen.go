// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/comment/post/{id})
	CreateComment(ctx echo.Context, id Id, params CreateCommentParams) error

	// (GET /API/person/{account})
	ProfileInfo(ctx echo.Context, account Account, params ProfileInfoParams) error

	// (GET /API/person/{account}/posts)
	ListProfilePosts(ctx echo.Context, account Account, params ListProfilePostsParams) error

	// (POST /API/post/)
	CreatePost(ctx echo.Context, params CreatePostParams) error

	// (GET /API/post/{id})
	ShowPost(ctx echo.Context, id Id, params ShowPostParams) error

	// (GET /API/user/)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (DELETE /API/user/follow/{account})
	DeleteFollow(ctx echo.Context, account Account, params DeleteFollowParams) error

	// (GET /API/user/follow/{account})
	CreateFollow(ctx echo.Context, account Account, params CreateFollowParams) error

	// (GET /API/user/info)
	Info(ctx echo.Context, params InfoParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error

	// (GET /API/user/posts)
	ListPosts(ctx echo.Context, params ListPostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCommentParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateComment(ctx, id, params)
	return err
}

// ProfileInfo converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileInfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfileInfo(ctx, account, params)
	return err
}

// ListProfilePosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListProfilePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProfilePostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListProfilePosts(ctx, account, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx, params)
	return err
}

// ShowPost converts echo context to params.
func (w *ServerInterfaceWrapper) ShowPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ShowPostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShowPost(ctx, id, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// DeleteFollow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFollow(ctx, account, params)
	return err
}

// CreateFollow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFollow(ctx, account, params)
	return err
}

// Info converts echo context to params.
func (w *ServerInterfaceWrapper) Info(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Info(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// ListPosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPosts(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/comment/post/:id", wrapper.CreateComment)
	router.GET("/API/person/:account", wrapper.ProfileInfo)
	router.GET("/API/person/:account/posts", wrapper.ListProfilePosts)
	router.POST("/API/post/", wrapper.CreatePost)
	router.GET("/API/post/:id", wrapper.ShowPost)
	router.GET("/API/user/", wrapper.Refresh)
	router.POST("/API/user/", wrapper.SignUp)
	router.DELETE("/API/user/follow/:account", wrapper.DeleteFollow)
	router.GET("/API/user/follow/:account", wrapper.CreateFollow)
	router.GET("/API/user/info", wrapper.Info)
	router.POST("/API/user/login", wrapper.Login)
	router.GET("/API/user/posts", wrapper.ListPosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qn8CAAD//7Gm+xtXJQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
