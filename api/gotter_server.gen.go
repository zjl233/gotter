// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (GET /API/user/info/)
	Info(ctx echo.Context, params InfoParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// Info converts echo context to params.
func (w *ServerInterfaceWrapper) Info(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Info(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/user/", wrapper.SignUp)
	router.GET("/API/user/info/", wrapper.Info)
	router.POST("/API/user/login", wrapper.Login)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWX2vkNhD/KkIt9EW33qQUwj51e4SykEsDaejDsZSJPGsrZ0u60Ti+EPa7F8l21rvr",
	"LA2Bg3uzpdHMb37z91lqV3tn0XKQi2fpgaBGRkp/3z5Aw2X8yjFoMp6Ns3IhH1oW6UZJE/9LhBxJKmmh",
	"RrkY3ilJ+LUxhLlcMDWoZNAl1hAV8pOPkoHJ2EJut9soHLyzAZPpSyJH8UM7y2g5foL3ldEQQWQPISJ5",
	"Hmn05DwSm+49Eo3MuPsH1Cy3Kp5/CsWxS8meqDEEKFCqQ3wJXVPxSOe9cxWClR30wc/Pg+CLqfQh1+oQ",
	"S3y3j0G7unZWYILigRmoU985mfy6xvYuIB07DFq7puNpX2sUFzEwStxZ87VBJTRY61joEmxytoZvV2iL",
	"GOqz35SsjX35nWCiC/KUmV+CsEZ/SQJv1eohhNZR/ooDw7USwKJCCCwuogMEmlPqbRzVwHKxU7SH4Hy+",
	"h+DiBILzYwifmsAiQI0CghgZeK/Rg9TpiRtCqcZqd+jWWyWnc+BfM0VfCrowuXAbwSUK7wLvMtxYxgIp",
	"EjBKoSNy7r8U/0BVrepi8nrjqsq1HSbDWIeR1MhCfwJE8LR7FnW87d2QgscxdKFrZG9Q5sltTIXTrh1E",
	"KDI8DlAfsZ0fIyoGNHsW9phcpyZg7MYNnQ50oh9rMFXE6A0j1L+HFooCaWbcrsnedmdiebMSfyPUUsmG",
	"4qOS2S+ybPTmqNMsBbeGGUnoylkU4L1UsjIabUjE9jaWHnSJ4nw239MeFlnWtu0M0vXMUZH1b0N2tfp4",
	"eX17+eF8Np+VXFeJcaQ6/LW5RXo0GqcgZkkki2lpuIoif7qEb3mzkko+IoUO+dlsPptHnc6jBW/kQv6a",
	"jmKFcJlCni1vVlkTkLJUIjHdj6oimMKKxguLrYiiMmmkNFxWeaTXFPbO9zMMA//h8qc3zaOfCTdyIX/K",
	"dhM26xt5NnTxiSFwewBMibzpzGAu+sQTsXtDSrP8aMoeTtLz+dk75ujrY0/Jpm9Cpzzt3fwf0++6d1ho",
	"wuisVP1ecbCKnNghks4N9ICnYL0wk3ULRvdolzCxFlPWFDiRNITckBW6IULL03mzitWs9hapz9NYdiJZ",
	"7912fRS7+Q8Ru49jRt4fhcoVxr5eu1fxepr9dPWOon11pzq5r0ytAafnyMSIX09thGTyyCs7UY08O1Xs",
	"P0bCdCEMjdYYwner9LhKIz0ORbk3LiunoSpd4MXF/GIut+vtfwEAAP//7uHN1RwNAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
