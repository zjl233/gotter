// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/comment/post/{id})
	CreateComment(ctx echo.Context, id Id, params CreateCommentParams) error

	// (GET /API/person/{account})
	ProfileInfo(ctx echo.Context, account Account, params ProfileInfoParams) error

	// (GET /API/person/{account}/follower)
	ListFollower(ctx echo.Context, account Account, params ListFollowerParams) error

	// (GET /API/person/{account}/following)
	ListFollowing(ctx echo.Context, account Account, params ListFollowingParams) error

	// (GET /API/person/{account}/posts)
	ListProfilePosts(ctx echo.Context, account Account, params ListProfilePostsParams) error

	// (POST /API/post/)
	CreatePost(ctx echo.Context, params CreatePostParams) error

	// (GET /API/post/{id})
	ShowPost(ctx echo.Context, id Id, params ShowPostParams) error

	// (GET /API/user/)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (DELETE /API/user/follow/{account})
	DeleteFollow(ctx echo.Context, account Account, params DeleteFollowParams) error

	// (GET /API/user/follow/{account})
	CreateFollow(ctx echo.Context, account Account, params CreateFollowParams) error

	// (GET /API/user/info)
	Info(ctx echo.Context, params InfoParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error

	// (GET /API/user/posts)
	ListPosts(ctx echo.Context, params ListPostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCommentParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateComment(ctx, id, params)
	return err
}

// ProfileInfo converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileInfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfileInfo(ctx, account, params)
	return err
}

// ListFollower converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollower(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollower(ctx, account, params)
	return err
}

// ListFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowingParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollowing(ctx, account, params)
	return err
}

// ListProfilePosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListProfilePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProfilePostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListProfilePosts(ctx, account, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx, params)
	return err
}

// ShowPost converts echo context to params.
func (w *ServerInterfaceWrapper) ShowPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ShowPostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShowPost(ctx, id, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// DeleteFollow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFollow(ctx, account, params)
	return err
}

// CreateFollow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFollow(ctx, account, params)
	return err
}

// Info converts echo context to params.
func (w *ServerInterfaceWrapper) Info(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Info(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// ListPosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPosts(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/comment/post/:id", wrapper.CreateComment)
	router.GET("/API/person/:account", wrapper.ProfileInfo)
	router.GET("/API/person/:account/follower", wrapper.ListFollower)
	router.GET("/API/person/:account/following", wrapper.ListFollowing)
	router.GET("/API/person/:account/posts", wrapper.ListProfilePosts)
	router.POST("/API/post/", wrapper.CreatePost)
	router.GET("/API/post/:id", wrapper.ShowPost)
	router.GET("/API/user/", wrapper.Refresh)
	router.POST("/API/user/", wrapper.SignUp)
	router.DELETE("/API/user/follow/:account", wrapper.DeleteFollow)
	router.GET("/API/user/follow/:account", wrapper.CreateFollow)
	router.GET("/API/user/info", wrapper.Info)
	router.POST("/API/user/login", wrapper.Login)
	router.GET("/API/user/posts", wrapper.ListPosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
