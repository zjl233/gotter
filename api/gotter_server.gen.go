// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/login)
	Login(ctx echo.Context) error

	// (POST /auth/signup)
	SignUp(ctx echo.Context) error

	// (GET /auth/whoami)
	AuthTest(ctx echo.Context, params AuthTestParams) error
	// Returns all posts
	// (GET /posts)
	FindPosts(ctx echo.Context, params FindPostsParams) error
	// Creates a new post
	// (POST /posts)
	AddPost(ctx echo.Context) error
	// Deletes a post by ID
	// (DELETE /posts/{id})
	DeletePostByID(ctx echo.Context, id int32) error
	// Returns a post by ID
	// (GET /posts/{id})
	FindPostByID(ctx echo.Context, id int32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// AuthTest converts echo context to params.
func (w *ServerInterfaceWrapper) AuthTest(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthTestParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AuthTest(ctx, params)
	return err
}

// FindPosts converts echo context to params.
func (w *ServerInterfaceWrapper) FindPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPostsParams
	// ------------- Optional query parameter "offset" -------------
	if paramValue := ctx.QueryParam("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPosts(ctx, params)
	return err
}

// AddPost converts echo context to params.
func (w *ServerInterfaceWrapper) AddPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPost(ctx)
	return err
}

// DeletePostByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePostByID(ctx, id)
	return err
}

// FindPostByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPostByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPostByID(ctx, id)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/auth/login", wrapper.Login)
	router.POST("/auth/signup", wrapper.SignUp)
	router.GET("/auth/whoami", wrapper.AuthTest)
	router.GET("/posts", wrapper.FindPosts)
	router.POST("/posts", wrapper.AddPost)
	router.DELETE("/posts/:id", wrapper.DeletePostByID)
	router.GET("/posts/:id", wrapper.FindPostByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXUU/kNhD+K5bbx9xm4WiF8lSOpdVKlEPleDqhyiSTxG1sB8+EZYvy3yvbybK7ybIC",
	"2itSn2Bje+ab+b6ZsR95alRtNGhCnjxyC1gbjeB/XGvRUGms/AuyM2uNdR8zwNTKmqTRPOEnaQqIjMyf",
	"oJlEpiSi1AUzlkl9LyqZ8baNOKYlKOGNrgzV1tRgSQZfqclgaN5vZn4t4rmxShBPuNT08ZBHnJY1hJ9Q",
	"gOVtxBUgimKnoX55dRTJSl14iBbuGmkh48lX3jnst9+0Eb+AxaVBGgOuCTQNXZ6GBWZyRiWw2p3e7zgY",
	"6zxeI4ykqhaIC2OzoUu3n/XLERPEKhBI7JilpbAiJbDreVwZirgSD+egCyp5cjiNuJK6/3k8wBytDv6e",
	"Gp1Lq4ZIfm2QGAoFTCBb8zPme2C+QbBaKNgRoFuK2LWWdw1ELBVaG3IBas/sWiQHP2xEcrAv+yu/0Tq8",
	"QbCOnF4Loqo+5zz5+si/t5DzhH8XPxVU3Mk+7sXTRttcyjEWfWRMZlvSWdf/j0cj+t8KR2b8pnVgx2X0",
	"Wtc7Su8Z0oJRt9ibdZv3FoN02V+ZvWndutS56atOpJ4CUEJWPOGilgRC/YQLURRgJ9LwiAdE/Cp8YyeX",
	"c/YFhHKGrTtUEtVJHK+daaPtFsdoIYnAsrQyGpioax7xSqag0Ufb+TipRVoCO5xMN6xjEseLxWIi/PLE",
	"2CLuzmJ8Pj89u7g6+3A4mU5KUpVzTmAVfs6vwN7LFMYgxn5L7PInqXJbfjEe38nlnEf8HiwG5AeT6WTq",
	"bJoatKglT/hH/8mJmkqvgti1+LgyhdReIp2uN1Nw7pZ70pyGhFuYZ/0SD8QB0ieTLbe6oqjrSqb+RPwH",
	"Gu8mFMbzre3FreLlxR00tRlramXm2jYZVq3FFsyQbcDbXZuSh9PpGyL2k3M/+rBtDG/gBhs/iIN6c9FU",
	"9CJMzzWvMLBHPDcaHmpICTIG/Z426hSFstBNvVtSqQVBwDQsxnV1JQt9Xb9BWHv6se+JI0E5v6yp14Ht",
	"o//gH8O1C9RFB4aFrGXvh+ZFaYSSznYBIyxboMZqljbWupoaZfqkofIL+DFTCysUEFj0I3XTlguHLeA2",
	"XDa5mwWuO4LIvNGuCz98cLgGrEVrWdiutJs3FvRrGD1dz0gb8aOgojFTK2zx8D7eUeFKDHeS8JsnAZmo",
	"Kj/PkeXWKD+HcYkE7l9Bq7nMSoFM9Pf6AV0/S51den97+EIglkuL5J26fhrU0DN314BdPhFn8hyBNojL",
	"RYUbzO29hrgL1iYKJR6kahTTjboF6+4fFrCpCPcCqqSSb8bzVm1JAoX7RNbdLXvvwlqxHBNdIL/H8183",
	"kYhjo5SwyzGJ+lfG6OA49S0QmfAt2ktL6iBmMhYmbNYE9G6PBWfSLCAbtp3My/jfmzCBlWEqLrtqEFnm",
	"/qyQf9NJswucz+d7VMiQdv7U+uJHmbVBKhXQyBMkfHenUeqiCu8adisQMmaCeuYzho0La0QrM3/c5ezT",
	"cj7b1/jmM9dm+qbXQep6jLt3P7UY/8LZPahe016OhsF7JAFG9p4ona1ICWws2Xzm8D0/xLaoWzHqeRkf",
	"VS8nLQdKy2/G2fT/W9bbtAYN+D1g73uqNt7qlUlFVRqk5Hh6POXtTft3AAAA//+VlApcxRQAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
