// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/comment/post/{id})
	CreateComment(ctx echo.Context, id Id, params CreateCommentParams) error

	// (GET /API/person/{account})
	ProfileInfo(ctx echo.Context, account Account, params ProfileInfoParams) error

	// (GET /API/person/{account}/follower)
	ListFollower(ctx echo.Context, account Account, params ListFollowerParams) error

	// (GET /API/person/{account}/following)
	ListFollowing(ctx echo.Context, account Account, params ListFollowingParams) error

	// (GET /API/person/{account}/posts)
	ListProfilePosts(ctx echo.Context, account Account, params ListProfilePostsParams) error

	// (POST /API/post/)
	CreatePost(ctx echo.Context, params CreatePostParams) error

	// (GET /API/post/{id})
	ShowPost(ctx echo.Context, id Id, params ShowPostParams) error

	// (GET /API/post/{id}/like)
	ToggleLike(ctx echo.Context, id Id, params ToggleLikeParams) error

	// (GET /API/search/person/{q})
	SearchUser(ctx echo.Context, q string, params SearchUserParams) error

	// (GET /API/user/)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (DELETE /API/user/follow/{account})
	DeleteFollow(ctx echo.Context, account Account, params DeleteFollowParams) error

	// (GET /API/user/follow/{account})
	CreateFollow(ctx echo.Context, account Account, params CreateFollowParams) error

	// (GET /API/user/info)
	Info(ctx echo.Context, params InfoParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error

	// (GET /API/user/posts)
	ListPosts(ctx echo.Context, params ListPostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCommentParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateComment(ctx, id, params)
	return err
}

// ProfileInfo converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileInfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfileInfo(ctx, account, params)
	return err
}

// ListFollower converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollower(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollower(ctx, account, params)
	return err
}

// ListFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowingParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollowing(ctx, account, params)
	return err
}

// ListProfilePosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListProfilePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProfilePostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListProfilePosts(ctx, account, params)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx, params)
	return err
}

// ShowPost converts echo context to params.
func (w *ServerInterfaceWrapper) ShowPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ShowPostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShowPost(ctx, id, params)
	return err
}

// ToggleLike converts echo context to params.
func (w *ServerInterfaceWrapper) ToggleLike(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ToggleLikeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToggleLike(ctx, id, params)
	return err
}

// SearchUser converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "q" -------------
	var q string

	err = runtime.BindStyledParameter("simple", false, "q", ctx.Param("q"), &q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchUser(ctx, q, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// DeleteFollow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFollow(ctx, account, params)
	return err
}

// CreateFollow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFollow(ctx, account, params)
	return err
}

// Info converts echo context to params.
func (w *ServerInterfaceWrapper) Info(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Info(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// ListPosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPosts(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/comment/post/:id", wrapper.CreateComment)
	router.GET("/API/person/:account", wrapper.ProfileInfo)
	router.GET("/API/person/:account/follower", wrapper.ListFollower)
	router.GET("/API/person/:account/following", wrapper.ListFollowing)
	router.GET("/API/person/:account/posts", wrapper.ListProfilePosts)
	router.POST("/API/post/", wrapper.CreatePost)
	router.GET("/API/post/:id", wrapper.ShowPost)
	router.GET("/API/post/:id/like", wrapper.ToggleLike)
	router.GET("/API/search/person/:q", wrapper.SearchUser)
	router.GET("/API/user/", wrapper.Refresh)
	router.POST("/API/user/", wrapper.SignUp)
	router.DELETE("/API/user/follow/:account", wrapper.DeleteFollow)
	router.GET("/API/user/follow/:account", wrapper.CreateFollow)
	router.GET("/API/user/info", wrapper.Info)
	router.POST("/API/user/login", wrapper.Login)
	router.GET("/API/user/posts", wrapper.ListPosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"i5p1LQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
