// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /API/comment/post/{id})
	CreateComment(ctx echo.Context, id Id, params CreateCommentParams) error

	// (GET /API/person/{account})
	ProfileInfo(ctx echo.Context, account Account, params ProfileInfoParams) error

	// (GET /API/person/{account}/follower)
	ListFollower(ctx echo.Context, account Account, params ListFollowerParams) error

	// (GET /API/person/{account}/following)
	ListFollowing(ctx echo.Context, account Account, params ListFollowingParams) error

	// (GET /API/person/{account}/posts)
	ListProfilePosts(ctx echo.Context, account Account, params ListProfilePostsParams) error

	// (GET /API/ping)
	Ping(ctx echo.Context) error

	// (POST /API/post/)
	CreatePost(ctx echo.Context, params CreatePostParams) error

	// (GET /API/post/{id})
	ShowPost(ctx echo.Context, id Id, params ShowPostParams) error

	// (GET /API/post/{id}/like)
	ToggleLike(ctx echo.Context, id Id, params ToggleLikeParams) error

	// (GET /API/search/person/{q})
	SearchUser(ctx echo.Context, q string, params SearchUserParams) error

	// (GET /API/user/)
	Refresh(ctx echo.Context, params RefreshParams) error

	// (POST /API/user/)
	SignUp(ctx echo.Context) error

	// (DELETE /API/user/follow/{account})
	DeleteFollow(ctx echo.Context, account Account, params DeleteFollowParams) error

	// (GET /API/user/follow/{account})
	CreateFollow(ctx echo.Context, account Account, params CreateFollowParams) error

	// (GET /API/user/info)
	Info(ctx echo.Context, params InfoParams) error

	// (POST /API/user/login)
	Login(ctx echo.Context) error

	// (GET /API/user/posts)
	ListPosts(ctx echo.Context, params ListPostsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateCommentParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateComment(ctx, id, params)
	return err
}

// ProfileInfo converts echo context to params.
func (w *ServerInterfaceWrapper) ProfileInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ProfileInfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ProfileInfo(ctx, account, params)
	return err
}

// ListFollower converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollower(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollower(ctx, account, params)
	return err
}

// ListFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) ListFollowing(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFollowingParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListFollowing(ctx, account, params)
	return err
}

// ListProfilePosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListProfilePosts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProfilePostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListProfilePosts(ctx, account, params)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// CreatePost converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreatePostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePost(ctx, params)
	return err
}

// ShowPost converts echo context to params.
func (w *ServerInterfaceWrapper) ShowPost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ShowPostParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShowPost(ctx, id, params)
	return err
}

// ToggleLike converts echo context to params.
func (w *ServerInterfaceWrapper) ToggleLike(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ToggleLikeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ToggleLike(ctx, id, params)
	return err
}

// SearchUser converts echo context to params.
func (w *ServerInterfaceWrapper) SearchUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "q" -------------
	var q string

	err = runtime.BindStyledParameter("simple", false, "q", ctx.Param("q"), &q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchUser(ctx, q, params)
	return err
}

// Refresh converts echo context to params.
func (w *ServerInterfaceWrapper) Refresh(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RefreshParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Refresh(ctx, params)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// DeleteFollow converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteFollow(ctx, account, params)
	return err
}

// CreateFollow converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFollow(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account" -------------
	var account Account

	err = runtime.BindStyledParameter("simple", false, "account", ctx.Param("account"), &account)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateFollow(ctx, account, params)
	return err
}

// Info converts echo context to params.
func (w *ServerInterfaceWrapper) Info(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InfoParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Info(ctx, params)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// ListPosts converts echo context to params.
func (w *ServerInterfaceWrapper) ListPosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-auth" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-auth")]; found {
		var XAuth XAuth
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-auth, got %d", n))
		}

		err = runtime.BindStyledParameter("simple", false, "x-auth", valueList[0], &XAuth)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-auth: %s", err))
		}

		params.XAuth = XAuth
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-auth is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPosts(ctx, params)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/API/comment/post/:id", wrapper.CreateComment)
	router.GET("/API/person/:account", wrapper.ProfileInfo)
	router.GET("/API/person/:account/follower", wrapper.ListFollower)
	router.GET("/API/person/:account/following", wrapper.ListFollowing)
	router.GET("/API/person/:account/posts", wrapper.ListProfilePosts)
	router.GET("/API/ping", wrapper.Ping)
	router.POST("/API/post/", wrapper.CreatePost)
	router.GET("/API/post/:id", wrapper.ShowPost)
	router.GET("/API/post/:id/like", wrapper.ToggleLike)
	router.GET("/API/search/person/:q", wrapper.SearchUser)
	router.GET("/API/user/", wrapper.Refresh)
	router.POST("/API/user/", wrapper.SignUp)
	router.DELETE("/API/user/follow/:account", wrapper.DeleteFollow)
	router.GET("/API/user/follow/:account", wrapper.CreateFollow)
	router.GET("/API/user/info", wrapper.Info)
	router.POST("/API/user/login", wrapper.Login)
	router.GET("/API/user/posts", wrapper.ListPosts)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1S0AAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
