openapi: "3.0.0"
info:
  version: 1.0.0
  title: Gotter API
  description: A twitter clone app
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080
paths:
  /API/user/follow/{account}:
    get:
      description: create follow relationship between current user and account
      operationId: createFollow
      parameters:
        - $ref: "#/components/parameters/x-auth"
        - $ref: "#/components/parameters/account"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
        default:
          $ref: '#/components/responses/Error'


    delete:
      description: create follow relationship between current user and account
      operationId: deleteFollow
      parameters:
        - $ref: "#/components/parameters/x-auth"
        - $ref: "#/components/parameters/account"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
        default:
          $ref: '#/components/responses/Error'



  /API/person/{account}/posts:
    get:
      description: return account's posts list
      operationId: listProfilePosts
      parameters:
        - $ref: "#/components/parameters/x-auth"
        - $ref: "#/components/parameters/account"
      responses:
        "200":
          description: account's post list
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
        default:
          $ref: "#/components/responses/Error"

  /API/person/{account}:
    get:
      description: return account's profile info, like info
      operationId: profileInfo
      parameters:
        - $ref: "#/components/parameters/x-auth"
        - $ref: "#/components/parameters/account"
      responses:
        "200":
          description: account's user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  person:
                    $ref: "#/components/schemas/User"
                  isFollowing:
                    type: boolean
        default:
          $ref: "#/components/responses/Error"
  /API/post/{id}:
    get:
      description: expand a post
      operationId: showPost
      parameters:
        - $ref: "#/components/parameters/x-auth"
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: expand post's likes user, comment and author
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  posts:
                    $ref: "#/components/schemas/PostExp"
        default:
          $ref: "#/components/responses/Error"

  /API/user/posts:
    get:
      description: create new post
      operationId: listPosts
      parameters:
        - $ref: "#/components/parameters/x-auth"
      responses:
        "200":
          description: list user and following's posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
        default:
          $ref: "#/components/responses/Error"

  /API/post/:
    post:
      description: create new post
      operationId: createPost
      parameters:
        - $ref: "#/components/parameters/x-auth"
      requestBody:
        description: Post to add to the store
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        "201":
          description: created success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  post:
                    $ref: "#/components/schemas/Post"
        default:
          $ref: "#/components/responses/Error"

  /API/comment/post/{id}:
    post:
      description: create new comment
      operationId: createComment
      parameters:
        - $ref: "#/components/parameters/x-auth"
        - $ref: "#/components/parameters/id"
      requestBody:
        description: Comment content to add under post
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        "201":
          description: created success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  post:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
        default:
          $ref: "#/components/responses/Error"

  /API/user/:
    post:
      description: sign up new user
      operationId: signUp
      requestBody:
        description: Sign up new user, duplicated account not allowed
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "201":
          description: New user created
          headers:
            x-auth:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/Error"

    get:
      description: refresh jwt
      operationId: refresh
      parameters:
        - $ref: "#/components/parameters/x-auth"
      responses:
        "200":
          description: Current user and refresh jwt
          headers:
            x-auth:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/Error"

  /API/user/login:
    post:
      description: Login user
      operationId: login
      requestBody:
        description: crident to login
        required: true
        content:
          application/json:
            schema:
              required:
                - account
                - password
              properties:
                account:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Login success
          headers:
            x-auth:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/Error"

  /API/user/info:
    get:
      description: return current user
      operationId: info
      parameters:
        - $ref: "#/components/parameters/x-auth"
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  user:
                    $ref: "#/components/schemas/User"
        default:
          $ref: "#/components/responses/Error"

#  /posts:
#    get:
#      summary: Returns all posts
#      description: Returns all posts from the system that the user has access to
#      operationId: findPosts
#      parameters:
#        - name: offset
#          in: query
#          description: set first post to return
#          required: false
#          schema:
#            type: integer
#            format: int32
#        - name: limit
#          in: query
#          description: maximum number of results to return
#          required: false
#          schema:
#            type: integer
#            format: int32
#      responses:
#        "200":
#          description: posts response
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/Post"
#        default:
#          $ref: "#/components/responses/Error"
#    post:
#      summary: Creates a new post
#      description: Creates a new post in the store. Duplicates are allowed
#      operationId: addPost
#      requestBody:
#        description: Post to add to the store
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/NewPost"
#      responses:
#        "201":
#          description: post response
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Post"
#        default:
#          $ref: "#/components/responses/Error"
#  /posts/{id}:
#    get:
#      summary: Returns a post by ID
#      description: Returns a post based on a single ID
#      operationId: findPostByID
#      parameters:
#        - name: id
#          in: path
#          description: ID of post to fetch
#          required: true
#          schema:
#            type: integer
#            format: int32
#      responses:
#        "200":
#          description: post response
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Post"
#        default:
#          $ref: "#/components/responses/Error"
#    delete:
#      summary: Deletes a post by ID
#      description: deletes a single post based on the ID supplied
#      operationId: deletePostByID
#      parameters:
#        - name: id
#          in: path
#          description: ID of post to delete
#          required: true
#          schema:
#            type: integer
#            format: int32
#      responses:
#        "204":
#          description: post deleted
#        default:
#          $ref: "#/components/responses/Error"
components:
  schemas:
    User:
      required:
        - _id
        - account
        - name
        - following
        - follower
        - posts
        - profileImg
        - bkgWallImg
      properties:
        _id:
          type: integer
          description: Unique id of the post
        account:
          type: string
        name:
          type: string
        following:
          type: array
          items:
            type: integer
        follower:
          type: array
          items:
            type: integer
        posts:
          type: array
          items:
            type: integer
        profileImg:
          type: string
        bkgWallImg:
          type: string

    Author:
      required:
        - _id
        - account
        - name
        - profileImg
      properties:
        _id:
          type: integer
          description: Unique id of the post
        account:
          type: string
        name:
          type: string
        profileImg:
          type: string

    Post:
      required:
        - _id
        - content
        - author
        - likes
        - comments
        - created
      properties:
        _id:
          type: integer
          description: Unique id of the post
        content:
          type: string
        author:
          $ref: "#/components/schemas/Author"
        likes:
          type: array
          items:
            type: integer
          nullable: false
        comments:
          type: array
          items:
            type: integer
          nullable: false
        created:
          type: string
          format: "date-time"

    # Explode Post
    PostExp:
      required:
        - _id
        - content
        - author
        - likes
        - comments
        - created
      properties:
        _id:
          type: integer
          description: Unique id of the post
        content:
          type: string
        author:
          type: object
          required:
            - _id
            - account
            - name
            - profileImg
            - isFollowing
          properties:
            _id:
              type: integer
              description: Unique id of the post
            account:
              type: string
            name:
              type: string
            profileImg:
              type: string
            isFollowing:
              type: boolean
        likes:
          type: array
          items:
            $ref: "#/components/schemas/Author"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        created:
          type: string
          format: "date-time"

    Comment:
      required:
        - _id
        - content
        - user
        - created
      properties:
        _id:
          type: integer
        content:
          type: string
        user:
          $ref: "#/components/schemas/Author"
        created:
          type: string
          format: "date-time"

    NewUser:
      required:
        - name
        - account
        - password
        - password2
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
          description: User's nickname
        account:
          type: string
          minLength: 1
          maxLength: 15
          description: User name, Unique, cannot change
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 20
          description: User password, at least 8 character
        password2:
          type: string
          format: password
          minLength: 8
          maxLength: 20
          description: Must same as password

  responses:
    Error:
      description: common error pattarn
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: boolean
              errMsg:
                type: string
                description: Error message
              err:
                type: object
            required:
              - result
              - errMsg
              - err

  parameters:
    x-auth:
      name: x-auth
      in: header
      required: true
      description: jwt auth
      schema:
        type: string
    id:
      name: id
      in: path
      description: ID of item
      required: true
      schema:
        type: integer
    account:
      name: account
      in: path
      description: account of user
      required: true
      schema:
        type: string
  # securitySchemes:
  #   bearerAuth:
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT
